using Excelam.System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Excelam.Tests.SetCellValue;

[TestClass]
public class SetCellValueNumberTests
{
    /// <summary>
    /// Start from aa new excel file.
    /// set cell values, test all formats.
    /// </summary>
    [TestMethod]
    public void SetCellValuesNumberNew()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberNew.xlsx";

        if (File.Exists(fileName))
            File.Delete(fileName);

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.CreateExcelFile(fileName, excelApi.ExcelFileApi.DefaultFirstSheetName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 12 - Number
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 12);
        Assert.IsTrue(res);

        // check
        int cellVal;  
        res= excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(12, cellVal);


        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }


    /// <summary>
    /// Start from an empty excel file.
    /// set cell values, test all formats.
    /// </summary>
    [TestMethod]
    public void SetCellValuesNumberEmpty()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberEmpty.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 12 - Number
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 12);
        Assert.IsTrue(res);

        // check
        int cellVal;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(12, cellVal);


        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    /// <summary>
    /// reuse the excel file SetCellValuesEmpty.xlsx
    /// generated by the previous test.
    /// </summary>
    [TestMethod]
    public void SetCellValuesSameFormatNoStyle()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberSameFormatNoStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 34 - Number
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 34);
        Assert.IsTrue(res);

        // check
        int cellVal;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(34, cellVal);

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    /// <summary>
    /// reuse the excel file SetCellValuesEmpty.xlsx
    /// generated by the previous test.
    /// </summary>
    [TestMethod]
    public void SetCellValuesSameFormatWithStyle()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberSameFormatWithStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 34 - Number
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 34);
        Assert.IsTrue(res);

        // check
        int cellVal;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(34, cellVal);

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    [TestMethod]
    public void SetCellValuesOtherFormatNoStyle()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberOtherFormatNoStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1: set 34 - Number, in place of a general
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 34);
        Assert.IsTrue(res);

        // check
        int cellVal;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(34, cellVal);

        //--B3: set 67 - Number, in place of a dateShort
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 67);
        Assert.IsTrue(res);

        // check
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(67, cellVal);

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    [TestMethod]
    public void SetCellValuesOtherFormatWithStyle()
    {
        string fileName = @"Files\SetCellValues\SetCellValuesNumberOtherFormatWithStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1: set 34 - Number, in place of a general
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B1", 34);
        Assert.IsTrue(res);

        // check
        int cellVal;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B1", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(34, cellVal);

        //--B3: set 67 - Number, in place of a dateShort
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 67);
        Assert.IsTrue(res);

        // check
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellVal);
        Assert.IsTrue(res);
        Assert.AreEqual(67, cellVal);


        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }
}
