using Excelam.System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Excelam.Tests;

/// <summary>
/// Set cell value tests.
/// </summary>
[TestClass]
public class ExcelCellValueApiSetValueTests
{
    /// <summary>
    /// Start from an empty excel file.
    /// set cell values, test all formats.
    /// </summary>
    [TestMethod]
    public void SetCellValuesEmpty()
    {
        string fileName = @"Files\Cells\SetCellValuesEmpty.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 'bonjour' - general
        res = excelApi.ExcelCellValueApi.SetCellValueGeneral(sheet, "B1", "bonjour");
        Assert.IsTrue(res);

        // check
        string cellValB1 = excelApi.ExcelCellValueApi.GetCellValueAsString(sheet, "B1");
        Assert.AreEqual("bonjour", cellValB1);

        //--B3, set 12 - number 
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 12);
        Assert.IsTrue(res);

        int cellValB3;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellValB3);
        Assert.IsTrue(res);
        Assert.AreEqual(12, cellValB3);

        //--B5, set 34.56 - decimal
        res = excelApi.ExcelCellValueApi.SetCellValueDecimal(sheet, "B5", 34.56);
        Assert.IsTrue(res);

        double cellValB5;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDecimal(sheet, "B5", out cellValB5);
        Assert.IsTrue(res);
        Assert.AreEqual(34.56, cellValB5);


        //--B7, set 19/05/2022 - DateShort
        res = excelApi.ExcelCellValueApi.SetCellValueDateShort(sheet, "B7", new DateTime(2022,05,19));
        Assert.IsTrue(res);

        DateTime cellValB7;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDateTime(sheet, "B7", out cellValB7);
        Assert.IsTrue(res);
        Assert.AreEqual(2022, cellValB7.Year);
        Assert.AreEqual(5, cellValB7.Month);
        Assert.AreEqual(19, cellValB7.Day);

        //--B9, set xxx - Time
        //res = excelApi.ExcelCellValueApi.SetCellValueTime(sheet, "B7", new DateTime(2022, 05, 19));
        //Assert.IsTrue(res);

        // TODO: DateLarge, Time, currency,...
        //ici();

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    /// <summary>
    /// reuse the excel file SetCellValuesEmpty.xlsx
    /// generated by the previous test.
    /// </summary>
    [TestMethod]
    public void SetCellValuesSameFormatNoStyle()
    {
        string fileName = @"Files\Cells\SetCellValuesSameFormatNoStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 'salute' - general
        res = excelApi.ExcelCellValueApi.SetCellValueGeneral(sheet, "B1", "salute");
        Assert.IsTrue(res);

        // check
        string cellValB1 = excelApi.ExcelCellValueApi.GetCellValueAsString(sheet, "B1");
        Assert.AreEqual("salute", cellValB1);

        //--B3, set 14 - number 
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 14);
        Assert.IsTrue(res);

        int cellValB3;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellValB3);
        Assert.IsTrue(res);
        Assert.AreEqual(14, cellValB3);

        //--B5, set 45.88 - decimal
        res = excelApi.ExcelCellValueApi.SetCellValueDecimal(sheet, "B5", 45.88);
        Assert.IsTrue(res);

        double cellValB5;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDecimal(sheet, "B5", out cellValB5);
        Assert.IsTrue(res);
        Assert.AreEqual(45.88, cellValB5);


        //--B7, set 21/09/1989 - DateShort
        res = excelApi.ExcelCellValueApi.SetCellValueDateShort(sheet, "B7", new DateTime(1989, 09, 21));
        Assert.IsTrue(res);

        DateTime cellValB7;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDateTime(sheet, "B7", out cellValB7);
        Assert.IsTrue(res);
        Assert.AreEqual(1989, cellValB7.Year);
        Assert.AreEqual(9, cellValB7.Month);
        Assert.AreEqual(21, cellValB7.Day);

        //--B9, set xxx - Time
        //res = excelApi.ExcelCellValueApi.SetCellValueTime(sheet, "B7", new DateTime(2022, 05, 19));
        //Assert.IsTrue(res);

        // TODO: DateLarge, Time, currency,...
        //ici();

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    /// <summary>
    /// reuse the excel file SetCellValuesEmpty.xlsx
    /// generated by the previous test.
    /// </summary>
    [TestMethod]
    public void SetCellValuesSameFormatWithStyle()
    {
        string fileName = @"Files\Cells\SetCellValuesSameFormatWithStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 'salute' - general
        res = excelApi.ExcelCellValueApi.SetCellValueGeneral(sheet, "B1", "salute");
        Assert.IsTrue(res);

        // check
        string cellValB1 = excelApi.ExcelCellValueApi.GetCellValueAsString(sheet, "B1");
        Assert.AreEqual("salute", cellValB1);

        //--B3, set 14 - number 
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 14);
        Assert.IsTrue(res);

        int cellValB3;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellValB3);
        Assert.IsTrue(res);
        Assert.AreEqual(14, cellValB3);

        //--B5, set 45.88 - decimal
        res = excelApi.ExcelCellValueApi.SetCellValueDecimal(sheet, "B5", 45.88);
        Assert.IsTrue(res);

        double cellValB5;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDecimal(sheet, "B5", out cellValB5);
        Assert.IsTrue(res);
        Assert.AreEqual(45.88, cellValB5);


        //--B7, set 21/09/1989 - DateShort
        res = excelApi.ExcelCellValueApi.SetCellValueDateShort(sheet, "B7", new DateTime(1989, 09, 21));
        Assert.IsTrue(res);

        DateTime cellValB7;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDateTime(sheet, "B7", out cellValB7);
        Assert.IsTrue(res);
        Assert.AreEqual(1989, cellValB7.Year);
        Assert.AreEqual(9, cellValB7.Month);
        Assert.AreEqual(21, cellValB7.Day);

        //--B9, set xxx - Time
        //res = excelApi.ExcelCellValueApi.SetCellValueTime(sheet, "B7", new DateTime(2022, 05, 19));
        //Assert.IsTrue(res);

        // TODO: DateLarge, Time, currency,...
        //ici();

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    [TestMethod]
    public void SetCellValuesOtherFormatNoStyle()
    {
        string fileName = @"Files\Cells\SetCellValuesOtherFormatNoStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 'salute' - general
        res = excelApi.ExcelCellValueApi.SetCellValueGeneral(sheet, "B1", "salute");
        Assert.IsTrue(res);

        // check
        string cellValB1 = excelApi.ExcelCellValueApi.GetCellValueAsString(sheet, "B1");
        Assert.AreEqual("salute", cellValB1);

        //--B3, set 14 - number 
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 14);
        Assert.IsTrue(res);

        int cellValB3;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellValB3);
        Assert.IsTrue(res);
        Assert.AreEqual(14, cellValB3);

        //--B5, set 45.88 - decimal
        res = excelApi.ExcelCellValueApi.SetCellValueDecimal(sheet, "B5", 45.88);
        Assert.IsTrue(res);

        double cellValB5;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDecimal(sheet, "B5", out cellValB5);
        Assert.IsTrue(res);
        Assert.AreEqual(45.88, cellValB5);


        //--B7, set 21/09/1989 - DateShort
        res = excelApi.ExcelCellValueApi.SetCellValueDateShort(sheet, "B7", new DateTime(1989, 09, 21));
        Assert.IsTrue(res);

        DateTime cellValB7;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDateTime(sheet, "B7", out cellValB7);
        Assert.IsTrue(res);
        Assert.AreEqual(1989, cellValB7.Year);
        Assert.AreEqual(9, cellValB7.Month);
        Assert.AreEqual(21, cellValB7.Day);

        //--B9, set xxx - Time
        //res = excelApi.ExcelCellValueApi.SetCellValueTime(sheet, "B7", new DateTime(2022, 05, 19));
        //Assert.IsTrue(res);

        // TODO: DateLarge, Time, currency,...
        //ici();

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

    [TestMethod]
    public void SetCellValuesOtherFormatWithStyle()
    {
        string fileName = @"Files\Cells\SetCellValuesOtherFormatWithStyle.xlsx";

        ExcelApi excelApi = new ExcelApi();
        ExcelWorkbook workbook;
        ExcelError error;
        bool res = excelApi.ExcelFileApi.OpenExcelFile(fileName, out workbook, out error);
        Assert.IsTrue(res);

        // get the first sheet
        var sheet = excelApi.ExcelSheetApi.GetSheet(workbook, 0);
        Assert.IsNotNull(sheet);

        //--B1 set 'salute' - general
        res = excelApi.ExcelCellValueApi.SetCellValueGeneral(sheet, "B1", "salute");
        Assert.IsTrue(res);

        // check
        string cellValB1 = excelApi.ExcelCellValueApi.GetCellValueAsString(sheet, "B1");
        Assert.AreEqual("salute", cellValB1);

        //--B3, set 14 - number , replace the shared string
        res = excelApi.ExcelCellValueApi.SetCellValueNumber(sheet, "B3", 14);
        Assert.IsTrue(res);

        int cellValB3;
        res = excelApi.ExcelCellValueApi.GetCellValueAsNumber(sheet, "B3", out cellValB3);
        Assert.IsTrue(res);
        Assert.AreEqual(14, cellValB3);

        //--B5, set 45.88 - decimal
        res = excelApi.ExcelCellValueApi.SetCellValueDecimal(sheet, "B5", 45.88);
        Assert.IsTrue(res);

        double cellValB5;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDecimal(sheet, "B5", out cellValB5);
        Assert.IsTrue(res);
        Assert.AreEqual(45.88, cellValB5);


        //--B7, set 21/09/1989 - DateShort
        res = excelApi.ExcelCellValueApi.SetCellValueDateShort(sheet, "B7", new DateTime(1989, 09, 21));
        Assert.IsTrue(res);

        DateTime cellValB7;
        res = excelApi.ExcelCellValueApi.GetCellValueAsDateTime(sheet, "B7", out cellValB7);
        Assert.IsTrue(res);
        Assert.AreEqual(1989, cellValB7.Year);
        Assert.AreEqual(9, cellValB7.Month);
        Assert.AreEqual(21, cellValB7.Day);

        //--B9, set xxx - Time
        //res = excelApi.ExcelCellValueApi.SetCellValueTime(sheet, "B7", new DateTime(2022, 05, 19));
        //Assert.IsTrue(res);

        // TODO: DateLarge, Time, currency,...
        //ici();

        //--close the file
        res = excelApi.ExcelFileApi.CloseExcelFile(workbook, out error);
        Assert.IsTrue(res);
    }

}
